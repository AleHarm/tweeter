-AWS 
	- Create lambda on AWS X
	- Change lambda handler URL to 'dist/lambda/<FunctionName>Lambda.handler' X
	- Add resource path in API Gateway 
		- Create resource (enable CORS) X
		- Add POST method to path X
		- Enable CORS on resource path (for POST) X
		- Add 400 error 
			- Create Method Response on POST with 400 and body type 'application/json' X
			- Create Integration Response on POST with '^\[BadRequest\].*' REGEX X
		- Deploy API with dev X
- Tweeter-web 
	- Open relevant service 
		- Create request and response above current code in relevant function X
		- Import non-existent request from tweeter-shared (using other imports as a template) X
	- Open ServerFacade 
		- Copy another function as a template X
		- Change types as appropriate X
		- Import non-existent types X
- Tweeter-shared 
	- Add request to request class X
	- Add reseponse to Response if needed X
	- Export request from index.ts X
	- Build (so tweeter-server can see values) X
- Tweeter-server 
	- Make lambda (use dist for imports) X
	- Add function to relevant service class (Cut code from tweeter-web service class) X
- Building 
	- tsc tweeter-server X
	- create nodejs file X
		- Place node_modules file inside X
		- Copy tweeter-shared files into nodejs/node_modules X
		- zip it X
	- zip tweeter-server dist and place in parent folder (tweeter-web-starter) X
	- Update lambdas 
		- Update .server file with proper lambda names X
		- Run uploadLambdas.sh X
	- Update layer 
		- Go to AWS and upload nodejs zip as new layer version (add node.js 20.x as compatible runtime) X
		- update .server with new version number X
		- Run updateLayera.sh X
	- build tweeter-web 
	- run tweeter-web 

- Fix whatever you missed 
- Celebrate 
- COMMIT 
	